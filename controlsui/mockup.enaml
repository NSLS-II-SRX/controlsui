from enaml.widgets.api import *
from enaml.layout.api import *
from enaml.core.api import *
from atom.api import Typed, observe, Event, set_default
from enaml.core.declarative import d_
from enaml.stdlib.fields import FloatField, IntField
from dataportal.replay.core import TimerButton
from controlsui.model import Model


class ProgrammaticButton(PushButton):
    # copied from dataportal.replay.core
    clicked = d_(Event(bool), writable=True)
    toggled = d_(Event(bool), writable=True)


class TimerButton(ProgrammaticButton):
    # copied from dataportal.replay.core
    timer = d_(Typed(Timer))
    checkable = True

    @observe('checked')
    def checked_changed(self, changed):
        if self.checked:
            self.timer.start()
        else:
            self.timer.stop()

enamldef ColorChannel(Container):
    attr color
    constraints = [
        vbox(
            hbox(lbl, rois),
            hbox(alpha0, alpha33, alpha66, alpha100, spacer),
        ),
        align('v_center', lbl, rois),
    ]
    Label: lbl:
        text = '{} channel roi'.format(color)
    ComboBox: rois:
        items << model.rois.keys()
        hug_width = 'ignore'
        selected_item ::
            model.set_channel_roi(self.selected_item, color)
    PushButton: alpha0:
        text = 'Alpha 0'
        clicked ::
            model.alpha = 0.
    PushButton: alpha33:
        text = 'Alpha 0.33'
        clicked ::
            model.alpha = 0.33
    PushButton: alpha66:
        text = 'Alpha 0.66'
        clicked ::
            model.alpha = 0.66
    PushButton: alpha100:
        text = 'Alpha 1'
        clicked ::
            model.alpha = 1.

enamldef Main(MainWindow):
    attr model = Model()
    Container:
        DockArea:
            layout = HSplitLayout(
                'scan controls',
                    VSplitLayout(
                        HSplitLayout(
                            VSplitLayout(
                                'primary image', 'cursor energy'),
                            'primary image controls',
                            'primary image info'),
#                        HSplitLayout('secondary image', 'secondary image controls',
#                            'secondary image info')
                    )
            )
            DockItem:
                name = 'scan controls'
                title = 'Scan Controls'
                stretch = 0
                Container:
                    constraints = [vbox(hbox(delay_info, delay),
                                        hbox(lump_info, lump),
                                        timer_btn, reset_btn),
                                   align('v_center', delay_info, delay),
                                   align('v_center', lump_info, lump)]
                    Label: delay_info:
                        text = "Time between updates"
                    SpinBox: delay:
                        minimum = 10
                        maximum = 100000000
                        value := model.delay
                    Label: lump_info:
                        text = "Datapoints per update"
                    IntField: lump:
                        value := model.points_per_update
                    TimerButton: timer_btn:
                        text = 'Start raster scan'
                        timer = the_timer
                        checked := model.scan_running
                    Timer: the_timer:
                        interval << model.delay
                        single_shot = False
                        timeout ::
                            model.new_data()
                    PushButton: reset_btn:
                        text = "Reset scan"
                        clicked ::
                            model.reset_scan()
            DockItem:
                name = 'primary image'
                title = 'Primary Image'
                Container:
                    MPLCanvas: im_canvas:
                        figure << model._fig_cs
                        toolbar_visible = True
            DockItem:
                name = 'cursor energy'
                title = 'Cursor Energy'
                Container:
                    MPLCanvas: canvas:
                        figure << model._fig_line
                        toolbar_visible = True

            DockItem:
                name = 'primary image controls'
                title = 'Primary Image Controls'
                stretch = 0
                Container:
                    constraints = [
                        vbox(
                            hbox(lbl_min, min, min_ev, spacer),
                            hbox(lbl_max, max, max_ev, spacer),
                            form,
                            red,
                            green,
                            blue,
                        ),
                        align('v_center', lbl_min, min, min_ev),
                        align('v_center', lbl_max, max, max_ev)
                    ]
                    Label: lbl_min:
                        text = 'min energy to plot'
                    FloatField: min:
                        minimum = 0.
                        maximum << model.energy[-1]
                        value := model.emin
                    Label: min_ev:
                        text = 'ev'
                    Label: lbl_max:
                        text = 'max energy to plot'
                    FloatField: max:
                        minimum = 0.
                        maximum << model.energy[-1]
                        value := model.emax
                    Label: max_ev:
                        text = 'ev'
                    Form: form:
                        Label:
                            text = 'grayscale_roi'
                        ComboBox: rois:
                            items << model.rois.keys()
                            selected_item ::
                                model.set_roi(self.selected_item)
                        Label:
                            text = 'alpha level (0 <= a <=1)'
                        FloatField:
                            minimum = 0.
                            maximum = 1.
                            value := model.alpha
                        Label:
                            text = 'figure aspect ratio'
                        ComboBox:
                            items << list(Model.cs_aspect.items)
                            selected_item >> model.cs_aspect
                    ColorChannel: red:
                        color = 'red'
                    ColorChannel: green:
                        color = 'green'
                    ColorChannel: blue:
                        color = 'blue'

            DockItem:
                name = 'primary image info'
                title = 'Primary Image Info'
                stretch = 0
#            DockItem:
#                name = 'secondary image'
#                title = 'Secondary Image'
#            DockItem:
#                name = 'secondary image controls'
#                title = 'Secondary Image Controls'
#            DockItem:
#                name = 'secondary image info'
#                title = 'Secondary Image Info'

